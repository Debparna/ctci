How to approach LinkLists -

1) Ask interviewer if linked list is single or double, sorted or unsorted, no duplicated    or duplicates?
2) Unlike arrays, linked lists are not indexed. You cannot access any node without going   	through from the beginning. 
3) Basic code:

struct Node
{
    int data;
    struct Node *next;
};
 
5) Array vs Linked List
- It's easier to store data of different sizes in a linked list. An array assumes every 	element is exactly the same size.
- As you mentioned, it's easier for a linked list to grow organically. An array's size 		needs to be known ahead of time, or re-created when it needs to grow.
- Shuffling a linked list is just a matter of changing what points to what. Shuffling an 	array is more complicated and/or takes more memory.
- 

Following are the points in favour of Linked Lists.

(1)	The size of the arrays is fixed: So we must know the upper limit on the number of elements in advance. Also, generally, the allocated memory is equal to the upper limit irrespective of the usage, and in practical uses, upper limit is rarely reached.

(2)	Inserting a new element in an array of elements is expensive, because room has to be created for the new elements and to create room existing elements have to shifted.

Deletion is also expensive with arrays until unless some special techniques are used. For example, to delete 1010 in id[], everything after 1010 has to be moved.

So Linked list provides following advantages over arrays
1)	Dynamic size
2)	Ease of insertion/deletion
   		- Insertion and deletion at beginning - constant time
   		- insertion & deletion at end - linear time 

Linked lists have following drawbacks:
1) Random access is not allowed. We have to access elements sequentially starting 		from the first node. So we cannot do binary search with linked lists.
2) Extra memory space for a pointer is required with each element of the list.
3) Arrays have better cache locality that can make a pretty big difference in performance.

